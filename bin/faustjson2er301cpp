#! /bin/env python3

import fileinput
import json
import sys

raw = ''.join([line for line in fileinput.input()])
data = json.loads(raw)

name = data['name']
filename = data['filename']
input_count = data['inputs']
output_count = data['outputs']
meta = {k: v for m in data['meta'] for k, v in m.items()}

try:
    inputs = [meta[f'er301_in{n}'] for n in range(1, input_count+1)]
    outputs = [meta[f'er301_out{n}'] for n in range(1, output_count+1)]
except KeyError as e:
    print('\n\nMissing process function in/out name declaration needed for er-301 object\n\n', file=sys.stderr)
    raise e

constructor_inputs = '\n  '.join([f'addInput(m{input_name});' for input_name in inputs])
constructor_outputs = '\n  '.join([f'addOutput(m{output_name});' for output_name in outputs])

input_buffers = ', '.join([f'm{input_name}.buffer()' for input_name in inputs])
output_buffers = ', '.join([f'm{output_name}.buffer()' for output_name in outputs])


# Get all the ui elements (to become paramters)
def iterate_items(items):
    sliders = []
    for item in items:
        if item['type'] == 'hslider' or item['type'] == 'vslider':
            sliders.append((item['label'], item['min'], item['max']))
        if item['type'] == 'vgroup' or item['type'] == 'hgroup':
            sliders.extend(iterate_items(item['items']))
    return sliders

params = iterate_items(data['ui']) if 'ui' in data else []
constructor_params = '\n  '.join([f'addParameter(m{param_name});' for (param_name, _, _) in params])
set_params = '\n  '.join([f'*(uiParams.ff{param_name}) = CLAMP(m{param_name}.target(), {min_val}, {max_val});' for (param_name, min_val, max_val) in params])

print(f"""#include "{name}.h"
#include <od/config.h>
#include <hal/ops.h>
{name}::{name}() : DSP(), uiParams()
{{
  {constructor_inputs}
  {constructor_outputs}
  {constructor_params}
  DSP.buildUserInterface(&uiParams);
}}
{name}::~{name}()
{{ }}
void {name}::process()
{{
  FAUSTFLOAT* inputs[] = {{ {input_buffers} }};
  FAUSTFLOAT* outputs[] = {{ {output_buffers} }};
  {set_params}
  DSP.compute(FRAMELENGTH, inputs, outputs);
}}
"""
)
